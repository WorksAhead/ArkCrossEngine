
// SlkExecute.txt - generated by the SLK parser generator 

private:
void    endStatement ( void );
void    pushId ( void );
void    buildOperator ( void );
void    buildFirstTernaryOperator ( void );
void    buildSecondTernaryOperator ( void );
void    beginStatement ( void );
void    beginFunction ( void );
void    endFunction ( void );
void    setFunctionId ( void );
void    markHaveStatement ( void );
void    markHaveExternScript ( void );
void    setExternScript ( void );
void    markParenthesisParam ( void );
void    buildHighOrderFunction ( void );
void    markBracketParam ( void );
void    markPeriodParam ( void );
void    setMemberId ( void );
void    markPeriodParenthesisParam ( void );
void    markPeriodBracketParam ( void );
void    markPeriodBraceParam ( void );
void    pushStr ( void );
void    pushNum ( void );

public:
void execute ( slk_size_t  number )
{
  switch ( number ) {
    case 1:  endStatement();  break;
    case 2:  pushId();  break;
    case 3:  buildOperator();  break;
    case 4:  buildFirstTernaryOperator();  break;
    case 5:  buildSecondTernaryOperator();  break;
    case 6:  beginStatement();  break;
    case 7:  beginFunction();  break;
    case 8:  endFunction();  break;
    case 9:  setFunctionId();  break;
    case 10:  markHaveStatement();  break;
    case 11:  markHaveExternScript();  break;
    case 12:  setExternScript();  break;
    case 13:  markParenthesisParam();  break;
    case 14:  buildHighOrderFunction();  break;
    case 15:  markBracketParam();  break;
    case 16:  markPeriodParam();  break;
    case 17:  setMemberId();  break;
    case 18:  markPeriodParenthesisParam();  break;
    case 19:  markPeriodBracketParam();  break;
    case 20:  markPeriodBraceParam();  break;
    case 21:  pushStr();  break;
    case 22:  pushNum();  break;
  }
}
