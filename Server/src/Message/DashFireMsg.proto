package DashFireMessage;

// ping消息，时间单位为毫秒
message Msg_Ping {
  required int64 send_ping_time = 1;
}

// pong消息
message Msg_Pong {
  required int64 send_ping_time = 1;
  required int64 send_pong_time = 2;
}

// 位置信息
message Position {
  required float x = 1;
  required float z = 2;
}
// 位置信息
message Position3D {
  required float x = 1;
  required float y = 2;
  required float z = 3;
}

// 玩家连接验证
message Msg_CR_ShakeHands {
  required uint32 auth_key = 1;
}

// 玩家连接验证结果
message Msg_RC_ShakeHands_Ret {
  enum RetType {
    SUCCESS = 0;
    ERROR = 1;
  }
  required RetType auth_result = 1; // 0为成功，其它为错误码
}

message Msg_CR_Observer {  
}

// 玩家创建
message Msg_CRC_Create {
  optional int32 role_id = 1;	//玩家ID，上行时不设置，下同
  optional bool is_player_self = 2;
  optional int32 hero_id = 3;
  optional int32 camp_id = 4;
  optional Position position = 5;
  optional float face_dirction = 6;
  repeated int32 skill_levels = 7;
  optional int64 scene_start_time = 8;
  optional string nickname = 9;
  repeated int32 shop_equipments_id = 10;
  optional int32 role_level = 11;
}

// 玩家进入
message Msg_RC_Enter {
  required int32 role_id = 1;
  required int32 hero_id = 2;
  required int32 camp_id = 3;
  required Position position = 4;
  required float face_dir = 5;
  required bool is_moving = 6;
  required float move_dir = 7;
}

message Msg_RC_Disappear {
  required int32 role_id = 1;
}

message Msg_RC_Dead {
  required int32 role_id = 1;
}

message Msg_RC_Revive {
  required int32 role_id = 1;	
  required bool is_player_self = 2;
  required int32 hero_id = 3;
  required int32 camp_id = 4;
  required Position position = 5;
  required float face_direction = 6;
}

// 玩家离开
message Msg_CRC_Exit {
  optional int32 role_id = 1;
}

message Msg_CRC_MoveStart {
  required int64 send_time = 1;
  optional int32 role_id = 2;
  required Position position = 3;
  required float dir = 4;
  required bool is_skill_moving = 5;
}

message Msg_CRC_MoveStop {
  required int64 send_time = 1;
  optional int32 role_id = 2;
  required Position position = 3;
}

message Msg_CRC_MoveMeetObstacle {
  required int64 send_time = 1;
  optional int32 role_id = 2;
  required float cur_pos_x = 3;
  required float cur_pos_z = 4;
}

// 玩家方向改变
message Msg_CRC_Face {
  optional int32 role_id = 1;
  required float face_direction = 2;
}

// 玩家技能
message Msg_CRC_Skill {
  required int64 send_time = 1;
  optional int32 role_id = 2;
  required int32 skill_id = 3;
  required Position stand_pos = 4;
  required float face_direction = 5;
  required float want_face_dir = 6;
}

message Msg_CRC_StopSkill {
  optional int32 role_id = 1;
  required int32 skill_id = 2;
}

// 创建Npc
message Msg_RC_CreateNpc {
  required int32 npc_id = 1;
  required int32 unit_id = 2;
  required Position cur_pos = 3;
  required float face_direction = 4;
  required int32 link_id = 5;
  optional int32 camp_id = 6;
  optional int32 owner_id = 7;
  optional int32 add_attr_id = 8;
  optional int32 level = 9;
}
message Msg_RC_CreatePartner {
  required int32 npc_id = 1;
  required int32 unit_id = 2;
  required Position cur_pos = 3;
  required float face_direction = 4;
  required int32 link_id = 5;
  optional int32 camp_id = 6;
  optional int32 owner_id = 7;
  optional int32 add_attr_id = 8;
}

message Msg_RC_DestroyNpc {
  required int32 npc_id = 1;
  required bool need_play_effect = 2;
}

// Npc进入
message Msg_RC_NpcEnter {
  required int32 npc_id = 1;
  required float cur_pos_x = 2;
  required float cur_pos_z = 3;
  required float face_direction = 4;
}

message Msg_RC_NpcMove {
  required int32 npc_id = 1;
  required float cur_pos_x = 2;
  required float cur_pos_z = 3;
  required bool is_moving = 4;
  optional float move_direction = 5;
  optional float face_direction = 6;
  optional float target_pos_x = 7;
  optional float target_pos_z = 8;
  optional float velocity_coefficient = 9;
  optional float velocity = 10;
  optional int32 move_mode = 11;
}

message Msg_RC_NpcFace {
  optional int32 npc_id = 1;
  required float face_direction = 2;
}

message Msg_RC_NpcTarget {
	required int32 npc_id = 1;
	required int32 target_id = 2;
}

message Msg_RC_NpcSkill {
  required int32 npc_id = 1;
  required int32 skill_id = 2;
  required Position stand_pos = 3;
  required float face_direction = 4;
}

message Msg_CRC_NpcStopSkill {
  required int32 npc_id = 1;
  required int32 skill_id = 2;
}

message Msg_RC_NpcDead {
  required int32 npc_id = 1;
}

message Msg_RC_NpcDisappear {
  required int32 npc_id = 1;
}

message Msg_RC_SyncProperty {
  required int32 role_id = 1;	
	required int32 hp = 2;
	required int32 np = 3;
	required int32 state = 4;
}

message Msg_RC_DebugSpaceInfo {
  message DebugSpaceInfo {
    required int32 obj_id = 1;
    required bool is_player = 2;
    required float pos_x = 3;
    required float pos_z = 4;	
    required float face_dir = 5;
  }
  repeated DebugSpaceInfo space_infos = 1;
}

message Msg_CR_SwitchDebug {
  required bool is_debug = 1;
}

message Msg_RC_SyncCombatStatisticInfo {
  required int32 role_id = 1;
  required int32 kill_hero_count = 2;
  required int32 assit_kill_count = 3;
  required int32 kill_npc_count = 4;
  required int32 dead_count = 5;
}

message Msg_RC_PvpCombatInfo {
	required int32 kill_hero_count_for_blue = 1;
	required int32 kill_hero_count_for_red = 2;
	required int32 link_id_for_killer = 3;
	required int32 link_id_for_killed = 4;
	required string killer_nickname = 5;
	required string killed_nickname = 6;
}

message Msg_CRC_SendImpactToEntity {
  required int32 sender_id = 1;
  required int32 target_id = 2;
  required int32 impact_id = 3;
  required int32 skill_id = 4;
  required int32 duration = 5;
  required Position3D sender_pos = 6;
  required float sender_dir = 7;
  required int32 hit_count = 8;
}

message Msg_CRC_StopGfxImpact {
  required int32 target_Id = 1;
  required int32 impact_Id = 2;
}

message Msg_CRC_InteractObject {
  optional int32 initiator_id = 1;
  required int32 receiver_id = 2;	
}

message Msg_RC_ImpactDamage{
  required int32 role_id = 1;
  required int32 attacker_id = 2;
  required bool is_killer = 3;
  required bool is_critical = 4;
  required bool is_ordinary = 5;
  required int32 hp = 6;
  optional int32 energy = 7;
}
message Msg_RC_ImpactRage{
  required int32 role_id = 1;
  required int32 rage = 2;
}

message Msg_RC_ControlObject {
  required int32 controller_id = 1;
  required int32 controlled_id = 2;
  required bool control_or_release = 3;
}

message Msg_RC_RefreshItemSkills {
  required int32 role_id = 1;
}

message Msg_RC_HighlightPrompt {
	required int32 dict_id = 1;
	repeated string argument = 2;
}

message Msg_CR_Quit {
	required bool is_force = 1;
}

message Msg_RC_UserMove {
  required int32 role_id = 1;
  required float cur_pos_x = 2;
  required float cur_pos_z = 3;
  required bool is_moving = 4;
  optional float move_direction = 5;
  optional float face_direction = 6;
	optional float target_pos_x = 7;
	optional float target_pos_z = 8;
	optional float velocity_coefficient = 9;
}

message Msg_RC_UserFace {
  required int32 role_id = 1;
  required float face_direction = 2;
}

message Msg_CR_UserMoveToPos {
  required float target_pos_x = 1;
	required float target_pos_z = 2;
  required float cur_pos_x = 3;
  required float cur_pos_z = 4;
}

message Msg_CR_UserMoveToAttack {
  required int32 target_id = 1;
  required float attack_range = 2;
  required float cur_pos_x = 3;
  required float cur_pos_z = 4;
}

message Msg_RC_UpdateUserBattleInfo {
  required int32 role_id = 1;
  message PresetInfo {
  	required int32 skill_id = 1;
  	required int32 skill_level = 2;
  }
  repeated PresetInfo skill_info = 2;
  required int32 preset_index = 3;
  message EquipInfo {
  	required int32 equip_id = 1;
  	required int32 equip_level = 2;
  	required int32 equip_random_property = 3;
  }
  repeated EquipInfo equip_info = 4;
  message LegacyInfo {
  	required int32 legacy_id = 1;
  	required int32 legacy_level = 2;
  	required int32 legacy_random_property = 3;
  	required bool legacy_IsUnlock = 4;
  }
  repeated LegacyInfo legacy_info = 5;
  message XSoulDataInfo {
    required int32 ItemId = 1;
    required int32 Level = 2;
    required int32 ModelLevel = 3;
    required int32 Experience = 4;
  }
  repeated XSoulDataInfo XSouls = 6;
  message PartnerDataInfo{
    required int32 PartnerId = 1;
    required int32 PartnerLevel = 2;
    required int32 PartnerStage = 3;
  }
  repeated PartnerDataInfo Partners = 7;
}

message Msg_RC_MissionCompleted {
  required int32 main_scene_id = 1;
}

message Msg_RC_ChangeScene {
  required int32 main_scene_id = 1;
}

message Msg_RC_CampChanged {
  required int32 obj_id = 1;
  required int32 camp_id = 2;
}

message Msg_RC_EnableInput {
  required bool is_enable = 1;
}

message Msg_RC_ShowUi {
  required bool is_show = 1;
}

message Msg_RC_ShowWall {
  required string wall_name = 1;
  required bool is_show = 2;
}

message Msg_RC_ShowDlg {
  required int32 dialog_id = 1;
}

message Msg_CR_DlgClosed {
  required int32 dialog_id = 1;
}

message Msg_RC_CameraLookat {
  required float x = 1;
  required float y = 2;
  required float z = 3;
  required bool is_immediately = 4;
}

message Msg_RC_CameraFollow {
  required int32 obj_id = 1;
  required bool is_immediately = 2;  
}

message Msg_RC_CameraYaw {
  required float yaw = 1;
  required int32 smooth_lag = 2;
}

message Msg_RC_CameraHeight {
  required float height = 1;
  required int32 smooth_lag = 2;
}

message Msg_RC_CameraDistance {
  required float distance = 1;
  required int32 smooth_lag = 2;
}

message Msg_RC_SetBlockedShader {
  required uint32 rim_color_1 = 1;
  required float rim_power_1 = 2;
  required float rim_cutvalue_1 = 3;
  required uint32 rim_color_2 = 4;
  required float rim_power_2 = 5;
  required float rim_cutvalue_2 = 6;
}

message Msg_CRC_GfxControlMoveStart {  
  required int64 send_time = 1;
  required int32 skill_or_impact_id = 2;
  required bool is_skill = 3;
  required int32 obj_id = 4;
  required Position cur_pos = 5;
}

message Msg_CRC_GfxControlMoveStop {  
  required int64 send_time = 1;
  required int32 skill_or_impact_id = 2;
  required bool is_skill = 3;
  required int32 obj_id = 4;
  required float face_dir = 5;
  required Position target_pos = 6;
}

message Msg_CR_GiveUpBattle{
}

message Msg_CR_DeleteDeadNpc{
  required int32 npc_id = 1;
}

message Msg_RC_UpdateCoefficient{
  required int32 obj_id = 1;
  required float hpmax_coefficient = 2;
}

message Msg_RC_AdjustPosition {
  required int32 role_id =1;
  required float x = 2;
  required float z = 3;
}

message Msg_RC_LockFrame {
  required float scale = 1;
}

message Msg_RC_PlayAnimation {
  required int32 obj_id = 1;
  required int32 anim_type = 2;
  required int32 anim_time = 3;
  required bool is_queued = 4;
}

message Msg_RC_StartCountDown {
  required int32 count_down_time = 1;
}

message Msg_RC_PublishEvent {
  message EventArg {
    required int32 val_type = 1;
    required string str_val = 2;
  }
  required bool is_logic_event = 1;
  required string ev_name = 2;
  required string group = 3;
  repeated EventArg args = 4;
}

message Msg_RC_CameraEnable {
  required string camera_name = 1;
  required bool is_enable = 2;
}

message Msg_CR_HitCountChanged {
  required int32 max_multi_hit_count = 1;
  required int32 hit_count = 2;
}

message Msg_RC_SendGfxMessage {
  message EventArg {
    required int32 val_type = 1;
    required string str_val = 2;
  }
  required bool is_with_tag = 1;
  required string name = 2;
  required string msg = 3;
  repeated EventArg args = 4;
}

message Msg_RC_SendGfxMessageById {
  message EventArg {
    required int32 val_type = 1;
    required string str_val = 2;
  }
  required int32 obj_id = 1;
  required string msg = 2;
  repeated EventArg args = 3;
}

message Msg_RC_AddSkill {
  required int32 obj_id = 1;
  required int32 skill_id = 2;
}

message Msg_RC_RemoveSkill {
  required int32 obj_id = 1;
  required int32 skill_id = 2;
}

message Msg_RC_StopImpact {
  required int32 obj_id = 1;
  required int32 impact_id = 2;
}
message Msg_CR_SyncCharacterGfxState
{
  required int32 obj_id = 1;
  required int32 gfx_state = 2;
}
message Msg_CR_SummonPartner
{
 required int32 obj_id = 1;
}

message Msg_CRC_SummonNpc
{
  required int32 npc_id = 1;
  required int32 owner_id = 2;
  required int32 summon_owner_id = 3;
  required int32 owner_skillid = 4;
  required int32 link_id = 5;
  required string model_prefab = 6;
  required int32 skill_id = 7;
  required int32 ai_id = 8;
  required bool follow_dead = 9;
  required float pos_x = 10;
  required float pos_y = 11;
  required float pos_z = 12;
  required string ai_params = 13;
}

message Msg_RC_SyncNpcOwnerId
{
	required int32 npc_id = 1;
  required int32 owner_id = 2;
}

message Msg_CR_GmCommand
{
  required int32 type = 1;
  optional string content = 2;
}

message Msg_RC_DropNpc
{
  required int32 npc_id = 1; 
  required int32 link_id = 2;
  required int32 owner_id = 3;
  required int32 from_npc_id = 4;
  required int32 drop_type = 5;
  required int32 drop_num = 6;
  optional int32 camp_id = 7;
  optional string model = 8;
  optional string effect = 9;
  optional string path = 10;
}

message Msg_CR_PickUpNpc
{
  required int32 npc_id = 1;
}
